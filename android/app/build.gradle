def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def flutterRoot = localProperties.getProperty('flutter.sdk')
if (flutterRoot == null) {
    throw new Exception("Flutter SDK not found. Define location with flutter.sdk in the local.properties file.")
}

def flutterVersionCode = localProperties.getProperty('flutter.versionCode')
if (flutterVersionCode == null) {
    flutterVersionCode = '1'
}

def flutterVersionName = localProperties.getProperty('flutter.versionName')
if (flutterVersionName == null) {
    flutterVersionName = '1.0.0'
}

try {
    project.setProperty('target-platform', 'android-arm')
}catch(Exception exception){

}


apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply from: "$flutterRoot/packages/flutter_tools/gradle/flutter.gradle"

android {

    lintOptions {
        checkReleaseBuilds false
    }

    compileSdkVersion ProjectVatiant.COMPILESDKVERSION
    buildToolsVersion ProjectVatiant.BUILDERTOOLSVERSION
    ndkVersion flutter.ndkVersion

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    defaultConfig {
        // TODO: Specify your own unique Application ID (https://developer.android.com/studio/build/application-id.html).
        applicationId ApplicationID
        // You can update the following values to match your application needs. 
        // For more information, see: https://docs.flutter.dev/deployment/android#reviewing-the-build-configuration.
        minSdkVersion rootProject.ext.ProjectVatiant.MINSDKVERSION
        targetSdkVersion rootProject.ext.ProjectVatiant.TARGETSDKVERSION
        versionCode flutterVersionCode.toInteger()
        versionName flutterVersionName
        multiDexEnabled true

        ndk {
            // 设置支持的SO库架构
            abiFilters  'armeabi-v7a'//, 'arm64-v8a', 'armeabi'
            // 'x86','x86_64'
        }
    }

    //配置签名
    signingConfigs {

        JHConfig {
            storeFile file(JH_SignatureFile)
            storePassword STOREPASSWORD
            keyAlias KEYALIAS
            keyPassword KEYPASSWORD
        }

        LDConfig {
            storeFile file(LD_SignatureFile)
            storePassword STOREPASSWORD
            keyAlias KEYALIAS
            keyPassword KEYPASSWORD
        }

    }

    buildTypes {

        release {
            minifyEnabled false   //关闭混淆
            shrinkResources false // 关闭清理无用资源
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig null
        }

        debug {
            minifyEnabled false // 开启混淆
            shrinkResources false // 自动清理无用资源
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            signingConfig null
        }

    }

    // # 配置产品风味
    flavorDimensions 'hardware'
    productFlavors {
        // #晶华配置
        JH {
            dimension 'hardware'
            signingConfig signingConfigs.JHConfig
        }
        // #灵动配置
        LD {
            dimension 'hardware'
            signingConfig signingConfigs.LDConfig
        }
        productFlavors.all {
            flavor ->
                {
                    flavor.manifestPlaceholders.put("CHANNEL", name)
                }
        }
    }

    android.applicationVariants.all { variant ->
        variant.outputs.all { output ->
            def version = "V${versionName}(${versionCode})"
            def buildType = variant.name
            def apkName = "fourInches-${buildType}-${version}-${Time()}.apk"
            outputFileName = apkName
        }
    }

    flutter {
        source '../..'
    }

}

dependencies {
    // 有以下三种方式依赖库包
    //    JHImplementation 只在晶华环境依赖
    //    LDImplementation 只在灵动环境中依赖
    //    implementation   任何环境中都依赖
    implementation fileTree(include: ['*.jar', '*.aar'], dir: 'libs')
    implementation("com.android.support:multidex:1.0.3")
    implementation(project(":module-setting"))
    implementation implementation(project(':module-manage-device',))
    implementation(project(":module-common"))
    implementation(project(":module-ai"))

    implementation rootProject.ext.nexus.basic
    implementation rootProject.ext.nexus.log
    implementation rootProject.ext.nexus.repositories
    implementation rootProject.ext.nexus.gateway
    implementation rootProject.ext.nexus.ota_upgrade
    implementation project(":aar-midea-sdk")
    implementation rootProject.ext.nexus.rxbus


}

static def Time() {
    return new Date().format("yyyy_MM_dd", TimeZone.getTimeZone("UTC"))
}